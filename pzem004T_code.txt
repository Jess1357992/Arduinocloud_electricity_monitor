/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/4d6cfbe0-06af-4f70-a40b-d84e44cc5adc

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudElectricCurrent current;
  CloudElectricPotential voltage;
  CloudEnergy energy;
  CloudFrequency frequency;
  CloudPower power;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <HardwareSerial.h>
#include <PZEM004Tv30.h>


#if !defined(PZEM_RX_PIN) && !defined(PZEM_TX_PIN)
#define PZEM_RX_PIN 16
#define PZEM_TX_PIN 17
#endif

#if !defined(PZEM_SERIAL)
#define PZEM_SERIAL Serial2
#endif

#if defined(ESP32)
PZEM004Tv30 pzem(PZEM_SERIAL, PZEM_RX_PIN, PZEM_TX_PIN);
#elif defined(ESP8266)
#else
PZEM004Tv30 pzem(PZEM_SERIAL);
#endif

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  // Read the data from the sensor
  float v = pzem.voltage();
  float c = pzem.current();
  float p = pzem.power();
  float e = pzem.energy();
  float f = pzem.frequency();
  float pf = pzem.pf();

  Serial.print("Voltage: "); Serial.print(v); Serial.println("V");
  Serial.print("Current: "); Serial.print(c); Serial.println("A");
  Serial.print("Power: "); Serial.print(p); Serial.println("W");
  Serial.print("Energy: "); Serial.print(e, 3); Serial.println("kWh");
  Serial.print("Frequency: "); Serial.print(f, 1); Serial.println("Hz");

  //需用其他變數命名，不可與iot cloud那裡撞名
  voltage = v;
  current = c;
  power = p;
  energy = e;
  frequency = f;

}



/*
  Since Current is READ_WRITE variable, onCurrentChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCurrentChange()  {
  // Add your code here to act upon Current change
}

/*
  Since Voltage is READ_WRITE variable, onVoltageChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onVoltageChange()  {
  // Add your code here to act upon Voltage change
}

/*
  Since Power is READ_WRITE variable, onPowerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPowerChange()  {
  // Add your code here to act upon Power change
}

/*
  Since Energy is READ_WRITE variable, onEnergyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onEnergyChange()  {
  // Add your code here to act upon Energy change
}

/*
  Since Frequency is READ_WRITE variable, onFrequencyChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFrequencyChange()  {
  // Add your code here to act upon Frequency change
}